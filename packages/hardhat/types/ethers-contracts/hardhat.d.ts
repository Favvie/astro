/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'ILaunchpad', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.ILaunchpad__factory>
getContractFactory(name: 'TokenStaking', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TokenStaking__factory>
getContractFactory(name: 'Launchpad', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Launchpad__factory>
getContractFactory(name: 'IParentContract', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IParentContract__factory>
getContractFactory(name: 'LaunchpadV2', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LaunchpadV2__factory>
getContractFactory(name: 'TokenFacet', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.TokenFacet__factory>
getContractFactory(name: 'YourContract', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.YourContract__factory>
getContractFactory(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Factory__factory>
getContractFactory(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Pair__factory>
getContractFactory(name: 'IUniswapV2Router', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IUniswapV2Router__factory>
getContractFactory(name: 'LaunchPadCore', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.LaunchPadCore__factory>
getContractFactory(name: 'PowerLib', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PowerLib__factory>

  getContractAt(name: 'ILaunchpad', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.ILaunchpad>
getContractAt(name: 'TokenStaking', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TokenStaking>
getContractAt(name: 'Launchpad', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Launchpad>
getContractAt(name: 'IParentContract', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IParentContract>
getContractAt(name: 'LaunchpadV2', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LaunchpadV2>
getContractAt(name: 'TokenFacet', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.TokenFacet>
getContractAt(name: 'YourContract', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.YourContract>
getContractAt(name: 'IUniswapV2Factory', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Factory>
getContractAt(name: 'IUniswapV2Pair', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Pair>
getContractAt(name: 'IUniswapV2Router', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IUniswapV2Router>
getContractAt(name: 'LaunchPadCore', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.LaunchPadCore>
getContractAt(name: 'PowerLib', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PowerLib>

  deployContract(name: 'ILaunchpad', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILaunchpad>
deployContract(name: 'TokenStaking', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenStaking>
deployContract(name: 'Launchpad', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Launchpad>
deployContract(name: 'IParentContract', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IParentContract>
deployContract(name: 'LaunchpadV2', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LaunchpadV2>
deployContract(name: 'TokenFacet', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenFacet>
deployContract(name: 'YourContract', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.YourContract>
deployContract(name: 'IUniswapV2Factory', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'IUniswapV2Router', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router>
deployContract(name: 'LaunchPadCore', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LaunchPadCore>
deployContract(name: 'PowerLib', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PowerLib>

  deployContract(name: 'ILaunchpad', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.ILaunchpad>
deployContract(name: 'TokenStaking', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenStaking>
deployContract(name: 'Launchpad', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Launchpad>
deployContract(name: 'IParentContract', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IParentContract>
deployContract(name: 'LaunchpadV2', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LaunchpadV2>
deployContract(name: 'TokenFacet', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.TokenFacet>
deployContract(name: 'YourContract', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.YourContract>
deployContract(name: 'IUniswapV2Factory', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Factory>
deployContract(name: 'IUniswapV2Pair', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Pair>
deployContract(name: 'IUniswapV2Router', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IUniswapV2Router>
deployContract(name: 'LaunchPadCore', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.LaunchPadCore>
deployContract(name: 'PowerLib', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PowerLib>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  
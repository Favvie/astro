/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common.js"
  
    export type CampaignInfoStruct = {id: BigNumberish, creator: AddressLike, targetAmount: BigNumberish, amountRaised: BigNumberish, tokensSold: BigNumberish, totalSupply: BigNumberish, tokensForSale: BigNumberish, creatorAllocation: BigNumberish, liquidityAllocation: BigNumberish, platformFeeTokens: BigNumberish, deadline: BigNumberish, tokenAddress: AddressLike, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: BigNumberish, blockNumberCreated: BigNumberish, promotionalOgPoints: BigNumberish, isPromoted: boolean, uniswapPair: AddressLike}

    export type CampaignInfoStructOutput = [id: bigint, creator: string, targetAmount: bigint, amountRaised: bigint, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, deadline: bigint, tokenAddress: string, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: bigint, blockNumberCreated: bigint, promotionalOgPoints: bigint, isPromoted: boolean, uniswapPair: string] & {id: bigint, creator: string, targetAmount: bigint, amountRaised: bigint, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, deadline: bigint, tokenAddress: string, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: bigint, blockNumberCreated: bigint, promotionalOgPoints: bigint, isPromoted: boolean, uniswapPair: string }
  

  export interface IParentContractInterface extends Interface {
    getFunction(nameOrSignature: "_getCampaignInfo" | "campaignCount" | "getSummaryStats"): FunctionFragment;

    

    encodeFunctionData(functionFragment: '_getCampaignInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'campaignCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'getSummaryStats', values?: undefined): string;

    decodeFunctionResult(functionFragment: '_getCampaignInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'campaignCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getSummaryStats', data: BytesLike): Result;
  }

  

  export interface IParentContract extends BaseContract {
    
    connect(runner?: ContractRunner | null): IParentContract;
    waitForDeployment(): Promise<this>;

    interface: IParentContractInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    _getCampaignInfo: TypedContractMethod<
      [arg0: BigNumberish, ],
      [CampaignInfoStructOutput],
      'view'
    >
    

    
    campaignCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    getSummaryStats: TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {totalCampaigns: bigint, activeCampaigns: bigint, completedCampaigns: bigint, cancelledCampaigns: bigint, expiredCampaigns: bigint, totalFundingRaised: bigint }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: '_getCampaignInfo'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [CampaignInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'campaignCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getSummaryStats'): TypedContractMethod<
      [],
      [[bigint, bigint, bigint, bigint, bigint, bigint] & {totalCampaigns: bigint, activeCampaigns: bigint, completedCampaigns: bigint, cancelledCampaigns: bigint, expiredCampaigns: bigint, totalFundingRaised: bigint }],
      'view'
    >;

    

    filters: {
      
    };
  }
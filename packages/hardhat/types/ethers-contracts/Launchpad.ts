/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace Launchpad {
      
    export type CampaignInfoStruct = {id: BigNumberish, creator: AddressLike, targetAmount: BigNumberish, amountRaised: BigNumberish, tokensSold: BigNumberish, totalSupply: BigNumberish, tokensForSale: BigNumberish, creatorAllocation: BigNumberish, liquidityAllocation: BigNumberish, platformFeeTokens: BigNumberish, deadline: BigNumberish, tokenAddress: AddressLike, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: BigNumberish, blockNumberCreated: BigNumberish, promotionalOgPoints: BigNumberish, isPromoted: boolean, uniswapPair: AddressLike, iconFileid: string, whitepaperFileid: string}

    export type CampaignInfoStructOutput = [id: bigint, creator: string, targetAmount: bigint, amountRaised: bigint, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, deadline: bigint, tokenAddress: string, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: bigint, blockNumberCreated: bigint, promotionalOgPoints: bigint, isPromoted: boolean, uniswapPair: string, iconFileid: string, whitepaperFileid: string] & {id: bigint, creator: string, targetAmount: bigint, amountRaised: bigint, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, deadline: bigint, tokenAddress: string, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, name: string, symbol: string, description: string, reserveRatio: bigint, blockNumberCreated: bigint, promotionalOgPoints: bigint, isPromoted: boolean, uniswapPair: string, iconFileid: string, whitepaperFileid: string }
  
    }

  export interface LaunchpadInterface extends Interface {
    getFunction(nameOrSignature: "BASIS_POINTS" | "CREATOR_ALLOCATION_PCT" | "LIQUIDITY_ALLOCATION_PCT" | "MAX_DEADLINE" | "MAX_RESERVE_RATIO" | "MAX_TOTAL_SUPPLY" | "MIN_DEADLINE" | "MIN_TOTAL_SUPPLY" | "OG_POINTS_ALLOCATION" | "TOKENS_FOR_SALE_PCT" | "_getCampaignInfo" | "buyTokens" | "campaignCount" | "campaigns" | "cancelCampaign" | "claimRefund" | "createCampaign" | "creatorCampaigns" | "getUserInvestment" | "ogPoints" | "platformFeePercentage" | "promoteCampaign" | "promotionFee" | "totalPlatformFees" | "uniswapFactory" | "uniswapRouter" | "usdcToken" | "userParticipatedCampaigns" | "userParticipation"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "CampaignCancelled" | "CampaignCreated" | "CampaignPromoted" | "FundingCompleted" | "LiquidityAdded" | "OgPointsAwarded" | "PlatformFeeUpdated" | "RefundClaimed" | "TokensPurchased" | "UserParticipatedInCampaign"): EventFragment;

    encodeFunctionData(functionFragment: 'BASIS_POINTS', values?: undefined): string;
encodeFunctionData(functionFragment: 'CREATOR_ALLOCATION_PCT', values?: undefined): string;
encodeFunctionData(functionFragment: 'LIQUIDITY_ALLOCATION_PCT', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_DEADLINE', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_RESERVE_RATIO', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_TOTAL_SUPPLY', values?: undefined): string;
encodeFunctionData(functionFragment: 'MIN_DEADLINE', values?: undefined): string;
encodeFunctionData(functionFragment: 'MIN_TOTAL_SUPPLY', values?: undefined): string;
encodeFunctionData(functionFragment: 'OG_POINTS_ALLOCATION', values?: undefined): string;
encodeFunctionData(functionFragment: 'TOKENS_FOR_SALE_PCT', values?: undefined): string;
encodeFunctionData(functionFragment: '_getCampaignInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'buyTokens', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'campaignCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'campaigns', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'cancelCampaign', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'claimRefund', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createCampaign', values: [string, string, string, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'creatorCampaigns', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserInvestment', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'ogPoints', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'platformFeePercentage', values?: undefined): string;
encodeFunctionData(functionFragment: 'promoteCampaign', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'promotionFee', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalPlatformFees', values?: undefined): string;
encodeFunctionData(functionFragment: 'uniswapFactory', values?: undefined): string;
encodeFunctionData(functionFragment: 'uniswapRouter', values?: undefined): string;
encodeFunctionData(functionFragment: 'usdcToken', values?: undefined): string;
encodeFunctionData(functionFragment: 'userParticipatedCampaigns', values: [AddressLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'userParticipation', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'BASIS_POINTS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'CREATOR_ALLOCATION_PCT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'LIQUIDITY_ALLOCATION_PCT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_DEADLINE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_RESERVE_RATIO', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_TOTAL_SUPPLY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MIN_DEADLINE', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MIN_TOTAL_SUPPLY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'OG_POINTS_ALLOCATION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'TOKENS_FOR_SALE_PCT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: '_getCampaignInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'buyTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'campaignCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'campaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelCampaign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimRefund', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createCampaign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'creatorCampaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserInvestment', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ogPoints', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'platformFeePercentage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'promoteCampaign', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'promotionFee', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalPlatformFees', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'uniswapFactory', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'uniswapRouter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'usdcToken', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userParticipatedCampaigns', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userParticipation', data: BytesLike): Result;
  }

  
    export namespace CampaignCancelledEvent {
      export type InputTuple = [campaignId: BigNumberish, creator: AddressLike];
      export type OutputTuple = [campaignId: bigint, creator: string];
      export interface OutputObject {campaignId: bigint, creator: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CampaignCreatedEvent {
      export type InputTuple = [campaignId: BigNumberish, creator: AddressLike, name: string, targetFunding: BigNumberish, totalSupply: BigNumberish, deadline: BigNumberish];
      export type OutputTuple = [campaignId: bigint, creator: string, name: string, targetFunding: bigint, totalSupply: bigint, deadline: bigint];
      export interface OutputObject {campaignId: bigint, creator: string, name: string, targetFunding: bigint, totalSupply: bigint, deadline: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CampaignPromotedEvent {
      export type InputTuple = [campaignId: BigNumberish];
      export type OutputTuple = [campaignId: bigint];
      export interface OutputObject {campaignId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundingCompletedEvent {
      export type InputTuple = [campaignId: BigNumberish, totalFunding: BigNumberish];
      export type OutputTuple = [campaignId: bigint, totalFunding: bigint];
      export interface OutputObject {campaignId: bigint, totalFunding: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace LiquidityAddedEvent {
      export type InputTuple = [campaignId: BigNumberish, usdcAmount: BigNumberish, tokensAmount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, usdcAmount: bigint, tokensAmount: bigint];
      export interface OutputObject {campaignId: bigint, usdcAmount: bigint, tokensAmount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OgPointsAwardedEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, amount: bigint];
      export interface OutputObject {campaignId: bigint, user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace PlatformFeeUpdatedEvent {
      export type InputTuple = [newFee: BigNumberish];
      export type OutputTuple = [newFee: bigint];
      export interface OutputObject {newFee: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RefundClaimedEvent {
      export type InputTuple = [campaignId: BigNumberish, investor: AddressLike, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, investor: string, amount: bigint];
      export interface OutputObject {campaignId: bigint, investor: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensPurchasedEvent {
      export type InputTuple = [campaignId: BigNumberish, buyer: AddressLike, usdcAmount: BigNumberish, tokensReceived: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [campaignId: bigint, buyer: string, usdcAmount: bigint, tokensReceived: bigint, timestamp: bigint];
      export interface OutputObject {campaignId: bigint, buyer: string, usdcAmount: bigint, tokensReceived: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UserParticipatedInCampaignEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, amount: bigint];
      export interface OutputObject {campaignId: bigint, user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Launchpad extends BaseContract {
    
    connect(runner?: ContractRunner | null): Launchpad;
    waitForDeployment(): Promise<this>;

    interface: LaunchpadInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BASIS_POINTS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    CREATOR_ALLOCATION_PCT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    LIQUIDITY_ALLOCATION_PCT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_DEADLINE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_RESERVE_RATIO: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_TOTAL_SUPPLY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MIN_DEADLINE: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MIN_TOTAL_SUPPLY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    OG_POINTS_ALLOCATION: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    TOKENS_FOR_SALE_PCT: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    _getCampaignInfo: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [Launchpad.CampaignInfoStructOutput],
      'view'
    >
    

    
    buyTokens: TypedContractMethod<
      [_campaignId: BigNumberish, _usdcAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    campaignCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    campaigns: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, boolean, boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string, string, string, string, string] & {creator: string, token: string, uniswapPair: string, targetAmount: bigint, amountRaised: bigint, deadline: bigint, reserveRatio: bigint, blockNumberCreated: bigint, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, isPromoted: boolean, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, promotionalOgPoints: bigint, id: bigint, name: string, symbol: string, description: string, iconFileid: string, whitepaperFileid: string }],
      'view'
    >
    

    
    cancelCampaign: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    claimRefund: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createCampaign: TypedContractMethod<
      [_name: string, _symbol: string, _description: string, _iconFileid: string, _whitepaperFileid: string, _targetFunding: BigNumberish, _totalSupply: BigNumberish, _reserveRatio: BigNumberish, _deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >
    

    
    creatorCampaigns: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    getUserInvestment: TypedContractMethod<
      [_campaignId: BigNumberish, _user: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    ogPoints: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    platformFeePercentage: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    promoteCampaign: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    promotionFee: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    totalPlatformFees: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    uniswapFactory: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    uniswapRouter: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    usdcToken: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    userParticipatedCampaigns: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    userParticipation: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BASIS_POINTS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'CREATOR_ALLOCATION_PCT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'LIQUIDITY_ALLOCATION_PCT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_DEADLINE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_RESERVE_RATIO'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_TOTAL_SUPPLY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MIN_DEADLINE'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MIN_TOTAL_SUPPLY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'OG_POINTS_ALLOCATION'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'TOKENS_FOR_SALE_PCT'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: '_getCampaignInfo'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [Launchpad.CampaignInfoStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'buyTokens'): TypedContractMethod<
      [_campaignId: BigNumberish, _usdcAmount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'campaignCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'campaigns'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, string, bigint, bigint, bigint, bigint, bigint, boolean, boolean, boolean, boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint, string, string, string, string, string] & {creator: string, token: string, uniswapPair: string, targetAmount: bigint, amountRaised: bigint, deadline: bigint, reserveRatio: bigint, blockNumberCreated: bigint, isActive: boolean, isFundingComplete: boolean, isCancelled: boolean, isPromoted: boolean, tokensSold: bigint, totalSupply: bigint, tokensForSale: bigint, creatorAllocation: bigint, liquidityAllocation: bigint, platformFeeTokens: bigint, promotionalOgPoints: bigint, id: bigint, name: string, symbol: string, description: string, iconFileid: string, whitepaperFileid: string }],
      'view'
    >;
getFunction(nameOrSignature: 'cancelCampaign'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'claimRefund'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createCampaign'): TypedContractMethod<
      [_name: string, _symbol: string, _description: string, _iconFileid: string, _whitepaperFileid: string, _targetFunding: BigNumberish, _totalSupply: BigNumberish, _reserveRatio: BigNumberish, _deadline: BigNumberish, ],
      [bigint],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'creatorCampaigns'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getUserInvestment'): TypedContractMethod<
      [_campaignId: BigNumberish, _user: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ogPoints'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'platformFeePercentage'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'promoteCampaign'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'promotionFee'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'totalPlatformFees'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'uniswapFactory'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'uniswapRouter'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'usdcToken'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'userParticipatedCampaigns'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'userParticipation'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'CampaignCancelled'): TypedContractEvent<CampaignCancelledEvent.InputTuple, CampaignCancelledEvent.OutputTuple, CampaignCancelledEvent.OutputObject>;
getEvent(key: 'CampaignCreated'): TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
getEvent(key: 'CampaignPromoted'): TypedContractEvent<CampaignPromotedEvent.InputTuple, CampaignPromotedEvent.OutputTuple, CampaignPromotedEvent.OutputObject>;
getEvent(key: 'FundingCompleted'): TypedContractEvent<FundingCompletedEvent.InputTuple, FundingCompletedEvent.OutputTuple, FundingCompletedEvent.OutputObject>;
getEvent(key: 'LiquidityAdded'): TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
getEvent(key: 'OgPointsAwarded'): TypedContractEvent<OgPointsAwardedEvent.InputTuple, OgPointsAwardedEvent.OutputTuple, OgPointsAwardedEvent.OutputObject>;
getEvent(key: 'PlatformFeeUpdated'): TypedContractEvent<PlatformFeeUpdatedEvent.InputTuple, PlatformFeeUpdatedEvent.OutputTuple, PlatformFeeUpdatedEvent.OutputObject>;
getEvent(key: 'RefundClaimed'): TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
getEvent(key: 'TokensPurchased'): TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
getEvent(key: 'UserParticipatedInCampaign'): TypedContractEvent<UserParticipatedInCampaignEvent.InputTuple, UserParticipatedInCampaignEvent.OutputTuple, UserParticipatedInCampaignEvent.OutputObject>;

    filters: {
      
      'CampaignCancelled(uint256,address)': TypedContractEvent<CampaignCancelledEvent.InputTuple, CampaignCancelledEvent.OutputTuple, CampaignCancelledEvent.OutputObject>;
      CampaignCancelled: TypedContractEvent<CampaignCancelledEvent.InputTuple, CampaignCancelledEvent.OutputTuple, CampaignCancelledEvent.OutputObject>;
    

      'CampaignCreated(uint256,address,string,uint256,uint256,uint256)': TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
      CampaignCreated: TypedContractEvent<CampaignCreatedEvent.InputTuple, CampaignCreatedEvent.OutputTuple, CampaignCreatedEvent.OutputObject>;
    

      'CampaignPromoted(uint256)': TypedContractEvent<CampaignPromotedEvent.InputTuple, CampaignPromotedEvent.OutputTuple, CampaignPromotedEvent.OutputObject>;
      CampaignPromoted: TypedContractEvent<CampaignPromotedEvent.InputTuple, CampaignPromotedEvent.OutputTuple, CampaignPromotedEvent.OutputObject>;
    

      'FundingCompleted(uint256,uint256)': TypedContractEvent<FundingCompletedEvent.InputTuple, FundingCompletedEvent.OutputTuple, FundingCompletedEvent.OutputObject>;
      FundingCompleted: TypedContractEvent<FundingCompletedEvent.InputTuple, FundingCompletedEvent.OutputTuple, FundingCompletedEvent.OutputObject>;
    

      'LiquidityAdded(uint256,uint256,uint256)': TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
      LiquidityAdded: TypedContractEvent<LiquidityAddedEvent.InputTuple, LiquidityAddedEvent.OutputTuple, LiquidityAddedEvent.OutputObject>;
    

      'OgPointsAwarded(uint256,address,uint256)': TypedContractEvent<OgPointsAwardedEvent.InputTuple, OgPointsAwardedEvent.OutputTuple, OgPointsAwardedEvent.OutputObject>;
      OgPointsAwarded: TypedContractEvent<OgPointsAwardedEvent.InputTuple, OgPointsAwardedEvent.OutputTuple, OgPointsAwardedEvent.OutputObject>;
    

      'PlatformFeeUpdated(uint256)': TypedContractEvent<PlatformFeeUpdatedEvent.InputTuple, PlatformFeeUpdatedEvent.OutputTuple, PlatformFeeUpdatedEvent.OutputObject>;
      PlatformFeeUpdated: TypedContractEvent<PlatformFeeUpdatedEvent.InputTuple, PlatformFeeUpdatedEvent.OutputTuple, PlatformFeeUpdatedEvent.OutputObject>;
    

      'RefundClaimed(uint256,address,uint256)': TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
      RefundClaimed: TypedContractEvent<RefundClaimedEvent.InputTuple, RefundClaimedEvent.OutputTuple, RefundClaimedEvent.OutputObject>;
    

      'TokensPurchased(uint256,address,uint256,uint256,uint256)': TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
      TokensPurchased: TypedContractEvent<TokensPurchasedEvent.InputTuple, TokensPurchasedEvent.OutputTuple, TokensPurchasedEvent.OutputObject>;
    

      'UserParticipatedInCampaign(uint256,address,uint256)': TypedContractEvent<UserParticipatedInCampaignEvent.InputTuple, UserParticipatedInCampaignEvent.OutputTuple, UserParticipatedInCampaignEvent.OutputObject>;
      UserParticipatedInCampaign: TypedContractEvent<UserParticipatedInCampaignEvent.InputTuple, UserParticipatedInCampaignEvent.OutputTuple, UserParticipatedInCampaignEvent.OutputObject>;
    
    };
  }
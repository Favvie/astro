/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface TokenStakingInterface extends Interface {
    getFunction(nameOrSignature: "BASIS_POINTS" | "MAX_APY" | "MAX_STAKING_PERIOD" | "MIN_STAKING_PERIOD" | "SECONDS_PER_YEAR" | "addRewards" | "calculateRewards" | "claimRewards" | "createStakingPool" | "emergencyWithdraw" | "getPoolStakers" | "getStakingPoolInfo" | "getUserStakeInfo" | "getUserStakingPools" | "hasStaked" | "initialize" | "launchpad" | "owner" | "poolStakers" | "renounceOwnership" | "setEmergencyMode" | "stakeTokens" | "stakingPoolCount" | "stakingPools" | "transferOwnership" | "unstakeTokens" | "updateStakingPool" | "userStakes" | "userStakingPools"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw" | "Initialized" | "OwnershipTransferred" | "RewardsAdded" | "RewardsClaimed" | "StakingPoolCreated" | "StakingPoolUpdated" | "TokensStaked" | "TokensUnstaked"): EventFragment;

    encodeFunctionData(functionFragment: 'BASIS_POINTS', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_APY', values?: undefined): string;
encodeFunctionData(functionFragment: 'MAX_STAKING_PERIOD', values?: undefined): string;
encodeFunctionData(functionFragment: 'MIN_STAKING_PERIOD', values?: undefined): string;
encodeFunctionData(functionFragment: 'SECONDS_PER_YEAR', values?: undefined): string;
encodeFunctionData(functionFragment: 'addRewards', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'calculateRewards', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'claimRewards', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'createStakingPool', values: [BigNumberish, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getPoolStakers', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getStakingPoolInfo', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getUserStakeInfo', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'getUserStakingPools', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'hasStaked', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'initialize', values: [AddressLike, AddressLike]): string;
encodeFunctionData(functionFragment: 'launchpad', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'poolStakers', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setEmergencyMode', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'stakeTokens', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'stakingPoolCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'stakingPools', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'unstakeTokens', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'updateStakingPool', values: [BigNumberish, BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'userStakes', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'userStakingPools', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'BASIS_POINTS', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_APY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MAX_STAKING_PERIOD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'MIN_STAKING_PERIOD', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'SECONDS_PER_YEAR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addRewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'calculateRewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'claimRewards', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'createStakingPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPoolStakers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getStakingPoolInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserStakeInfo', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getUserStakingPools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasStaked', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'launchpad', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'poolStakers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setEmergencyMode', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakeTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakingPoolCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'stakingPools', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'unstakeTokens', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateStakingPool', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userStakes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userStakingPools', data: BytesLike): Result;
  }

  
    export namespace EmergencyWithdrawEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, amount: bigint];
      export interface OutputObject {campaignId: bigint, user: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace InitializedEvent {
      export type InputTuple = [version: BigNumberish];
      export type OutputTuple = [version: bigint];
      export interface OutputObject {version: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardsAddedEvent {
      export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish];
      export type OutputTuple = [campaignId: bigint, amount: bigint];
      export interface OutputObject {campaignId: bigint, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RewardsClaimedEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, rewards: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, rewards: bigint, timestamp: bigint];
      export interface OutputObject {campaignId: bigint, user: string, rewards: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakingPoolCreatedEvent {
      export type InputTuple = [campaignId: BigNumberish, token: AddressLike, apy: BigNumberish, minStakingPeriod: BigNumberish];
      export type OutputTuple = [campaignId: bigint, token: string, apy: bigint, minStakingPeriod: bigint];
      export interface OutputObject {campaignId: bigint, token: string, apy: bigint, minStakingPeriod: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace StakingPoolUpdatedEvent {
      export type InputTuple = [campaignId: BigNumberish, newApy: BigNumberish, enabled: boolean];
      export type OutputTuple = [campaignId: bigint, newApy: bigint, enabled: boolean];
      export interface OutputObject {campaignId: bigint, newApy: bigint, enabled: boolean };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensStakedEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, amount: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, amount: bigint, timestamp: bigint];
      export interface OutputObject {campaignId: bigint, user: string, amount: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TokensUnstakedEvent {
      export type InputTuple = [campaignId: BigNumberish, user: AddressLike, amount: BigNumberish, rewards: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [campaignId: bigint, user: string, amount: bigint, rewards: bigint, timestamp: bigint];
      export interface OutputObject {campaignId: bigint, user: string, amount: bigint, rewards: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface TokenStaking extends BaseContract {
    
    connect(runner?: ContractRunner | null): TokenStaking;
    waitForDeployment(): Promise<this>;

    interface: TokenStakingInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    BASIS_POINTS: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_APY: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MAX_STAKING_PERIOD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    MIN_STAKING_PERIOD: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    SECONDS_PER_YEAR: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    addRewards: TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    calculateRewards: TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, _duration: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    claimRewards: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    createStakingPool: TypedContractMethod<
      [_campaignId: BigNumberish, _apy: BigNumberish, _minStakingPeriod: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    emergencyWithdraw: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getPoolStakers: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [string[]],
      'view'
    >
    

    
    getStakingPoolInfo: TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {stakingToken: string, totalStaked: bigint, rewardPool: bigint, apy: bigint, minStakingPeriod: bigint, enabled: boolean, emergencyMode: boolean, stakerCount: bigint }],
      'view'
    >
    

    
    getUserStakeInfo: TypedContractMethod<
      [_campaignId: BigNumberish, _user: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {amount: bigint, rewards: bigint, stakingTime: bigint, timeToUnlock: bigint }],
      'view'
    >
    

    
    getUserStakingPools: TypedContractMethod<
      [_user: AddressLike, ],
      [bigint[]],
      'view'
    >
    

    
    hasStaked: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    initialize: TypedContractMethod<
      [_launchpad: AddressLike, _owner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    launchpad: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    poolStakers: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setEmergencyMode: TypedContractMethod<
      [_campaignId: BigNumberish, _emergencyMode: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    stakeTokens: TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    stakingPoolCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    stakingPools: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {stakingToken: string, totalStaked: bigint, rewardPool: bigint, apy: bigint, minStakingPeriod: bigint, campaignId: bigint, enabled: boolean, emergencyMode: boolean }],
      'view'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    unstakeTokens: TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    updateStakingPool: TypedContractMethod<
      [_campaignId: BigNumberish, _apy: BigNumberish, _enabled: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    userStakes: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {amount: bigint, rewards: bigint, stakingTime: bigint, lastRewardUpdate: bigint }],
      'view'
    >
    

    
    userStakingPools: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'BASIS_POINTS'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_APY'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MAX_STAKING_PERIOD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'MIN_STAKING_PERIOD'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'SECONDS_PER_YEAR'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'addRewards'): TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'calculateRewards'): TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, _duration: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'claimRewards'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'createStakingPool'): TypedContractMethod<
      [_campaignId: BigNumberish, _apy: BigNumberish, _minStakingPeriod: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'emergencyWithdraw'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getPoolStakers'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [string[]],
      'view'
    >;
getFunction(nameOrSignature: 'getStakingPoolInfo'): TypedContractMethod<
      [_campaignId: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, boolean, boolean, bigint] & {stakingToken: string, totalStaked: bigint, rewardPool: bigint, apy: bigint, minStakingPeriod: bigint, enabled: boolean, emergencyMode: boolean, stakerCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserStakeInfo'): TypedContractMethod<
      [_campaignId: BigNumberish, _user: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {amount: bigint, rewards: bigint, stakingTime: bigint, timeToUnlock: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'getUserStakingPools'): TypedContractMethod<
      [_user: AddressLike, ],
      [bigint[]],
      'view'
    >;
getFunction(nameOrSignature: 'hasStaked'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'initialize'): TypedContractMethod<
      [_launchpad: AddressLike, _owner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'launchpad'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'poolStakers'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setEmergencyMode'): TypedContractMethod<
      [_campaignId: BigNumberish, _emergencyMode: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stakeTokens'): TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'stakingPoolCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'stakingPools'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint, bigint, bigint, bigint, bigint, boolean, boolean] & {stakingToken: string, totalStaked: bigint, rewardPool: bigint, apy: bigint, minStakingPeriod: bigint, campaignId: bigint, enabled: boolean, emergencyMode: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'unstakeTokens'): TypedContractMethod<
      [_campaignId: BigNumberish, _amount: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateStakingPool'): TypedContractMethod<
      [_campaignId: BigNumberish, _apy: BigNumberish, _enabled: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userStakes'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [[bigint, bigint, bigint, bigint] & {amount: bigint, rewards: bigint, stakingTime: bigint, lastRewardUpdate: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'userStakingPools'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'EmergencyWithdraw'): TypedContractEvent<EmergencyWithdrawEvent.InputTuple, EmergencyWithdrawEvent.OutputTuple, EmergencyWithdrawEvent.OutputObject>;
getEvent(key: 'Initialized'): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'RewardsAdded'): TypedContractEvent<RewardsAddedEvent.InputTuple, RewardsAddedEvent.OutputTuple, RewardsAddedEvent.OutputObject>;
getEvent(key: 'RewardsClaimed'): TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
getEvent(key: 'StakingPoolCreated'): TypedContractEvent<StakingPoolCreatedEvent.InputTuple, StakingPoolCreatedEvent.OutputTuple, StakingPoolCreatedEvent.OutputObject>;
getEvent(key: 'StakingPoolUpdated'): TypedContractEvent<StakingPoolUpdatedEvent.InputTuple, StakingPoolUpdatedEvent.OutputTuple, StakingPoolUpdatedEvent.OutputObject>;
getEvent(key: 'TokensStaked'): TypedContractEvent<TokensStakedEvent.InputTuple, TokensStakedEvent.OutputTuple, TokensStakedEvent.OutputObject>;
getEvent(key: 'TokensUnstaked'): TypedContractEvent<TokensUnstakedEvent.InputTuple, TokensUnstakedEvent.OutputTuple, TokensUnstakedEvent.OutputObject>;

    filters: {
      
      'EmergencyWithdraw(uint32,address,uint256)': TypedContractEvent<EmergencyWithdrawEvent.InputTuple, EmergencyWithdrawEvent.OutputTuple, EmergencyWithdrawEvent.OutputObject>;
      EmergencyWithdraw: TypedContractEvent<EmergencyWithdrawEvent.InputTuple, EmergencyWithdrawEvent.OutputTuple, EmergencyWithdrawEvent.OutputObject>;
    

      'Initialized(uint64)': TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
      Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'RewardsAdded(uint32,uint256)': TypedContractEvent<RewardsAddedEvent.InputTuple, RewardsAddedEvent.OutputTuple, RewardsAddedEvent.OutputObject>;
      RewardsAdded: TypedContractEvent<RewardsAddedEvent.InputTuple, RewardsAddedEvent.OutputTuple, RewardsAddedEvent.OutputObject>;
    

      'RewardsClaimed(uint32,address,uint256,uint256)': TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
      RewardsClaimed: TypedContractEvent<RewardsClaimedEvent.InputTuple, RewardsClaimedEvent.OutputTuple, RewardsClaimedEvent.OutputObject>;
    

      'StakingPoolCreated(uint32,address,uint256,uint256)': TypedContractEvent<StakingPoolCreatedEvent.InputTuple, StakingPoolCreatedEvent.OutputTuple, StakingPoolCreatedEvent.OutputObject>;
      StakingPoolCreated: TypedContractEvent<StakingPoolCreatedEvent.InputTuple, StakingPoolCreatedEvent.OutputTuple, StakingPoolCreatedEvent.OutputObject>;
    

      'StakingPoolUpdated(uint32,uint256,bool)': TypedContractEvent<StakingPoolUpdatedEvent.InputTuple, StakingPoolUpdatedEvent.OutputTuple, StakingPoolUpdatedEvent.OutputObject>;
      StakingPoolUpdated: TypedContractEvent<StakingPoolUpdatedEvent.InputTuple, StakingPoolUpdatedEvent.OutputTuple, StakingPoolUpdatedEvent.OutputObject>;
    

      'TokensStaked(uint32,address,uint256,uint256)': TypedContractEvent<TokensStakedEvent.InputTuple, TokensStakedEvent.OutputTuple, TokensStakedEvent.OutputObject>;
      TokensStaked: TypedContractEvent<TokensStakedEvent.InputTuple, TokensStakedEvent.OutputTuple, TokensStakedEvent.OutputObject>;
    

      'TokensUnstaked(uint32,address,uint256,uint256,uint256)': TypedContractEvent<TokensUnstakedEvent.InputTuple, TokensUnstakedEvent.OutputTuple, TokensUnstakedEvent.OutputObject>;
      TokensUnstaked: TypedContractEvent<TokensUnstakedEvent.InputTuple, TokensUnstakedEvent.OutputTuple, TokensUnstakedEvent.OutputObject>;
    
    };
  }